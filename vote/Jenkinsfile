pipeline {
    agent none
stages{
    stage (build){
    agent {
     docker {
        image 'python:2.7.16-slim' 
        args '-v $HOME/.m2:/root/.m2'
        args '--user root'
    }
    }
    
    steps{

      echo 'Compiling Vote app'
      dir ('vote'){
           sh 'pip install -r requirements.txt'
        }
        
    }
 }   
       stage('Sonarqube') {
      agent any
      /*when{
        branch 'master'
      }*/
      tools {
        jdk "JDK11" // the name you have given the JDK installation in Global Tool Configuration
      }

      environment{
        sonarpath = tool 'SonarScanner'
      }

      steps {
            echo 'Running Sonarqube Analysis..'
            withSonarQubeEnv('sonar-instavote') {
              sh "${sonarpath}/bin/sonar-scanner -Dproject.settings=sonar-project.properties -Dorg.jenkinsci.plugins.durabletask.BourneShellScript.HEARTBEAT_CHECK_INTERVAL=86400"
            }
      }
    }


    stage("Quality Gate") {
        steps {
            timeout(time: 1, unit: 'HOURS') {
                // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                // true = set pipeline to UNSTABLE, false = don't
                waitForQualityGate abortPipeline: true
            }
        }
    }
stage ('docker-Package') {
        agent any
    steps{
        echo 'Running unit test on vote App'
        script{
            docker.withRegistry('https://index.docker.io/v1/', 'test') {

            def voteImage = docker.build("aderock/vote:v1", "./vote")
            voteImage.push()
            voteImage.push("${env.BRANCH_NAME}")
                    
                

                }
                
            }
        }
    }
}
}